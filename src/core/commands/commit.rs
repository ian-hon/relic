use clap::ArgMatches;

use crate::{
    core::{commit::Commit, state::State},
    utils,
};

pub fn commit(state: &mut State, args: &ArgMatches) {
    // push into pending stage
    // update upstream

    // everything after the first line will be generated by Change::serialise_change
    r#"= {commit id} {unix timestamp of commit} {message} {description} {author}
+ D "lorem/ipsum/dolor"
+ F "lorem/ipsum/dolor/earth.txt" "earth.txt"
- D "lorem/sit"
=
| "lorem/ipsum/dolor/earth.txt"
+ 3 asdfsdf
+ 5 sfsdf
- 7
| "lorem/ipsum/saturn/txt"
+ 4 lsdfljs"#;
    let message = args.get_one::<String>("message").unwrap().clone();
    let description = args
        .get_one::<String>("description")
        .map_or("".to_string(), String::clone);

    let commit = Commit {
        id: None,
        message,
        description,
        change: state.get_changes(),
        timestamp: utils::get_time(),
        author: "no_one".to_string(),
    };

    state.pending_add(commit);
    // update upstream
    (*state).update_upstream(&mut state.track_set.clone());
}
